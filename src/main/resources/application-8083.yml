project:
  application: SpringBootZookeeperConsumer
  name: SpringBootZookeeperConsumer
  chineseName: SpringBoot工程Zookeeeper样例
  version:  1.0
  unpackTime: 2020/07/26
  PIC: taojun
  versionControlNo: 1.0
  versionControlPath:
  framework: SpringBoot

server:
  port: 8083
  tomcat:
    uri-encoding: UTF-8
    display-name: SpringBoot
    basedir: /tomcat
    accesslog:
      enabled: true
      buffered: true
      directory: ./logs
      file-date-format: _yyyy-MM-dd
      pattern: '%h %t "%r" %s %b %D %I "%{X-Forwarded-For}i" "%{User-Agent}i" "%{Referer}i" "%{X-Real-IP}i"'
      prefix: ${project.name}_accesslog
      rename-on-rotate: false
      request-attributes-enabled: false
      rotate: true
      suffix: .log
  # 上下文路径
  servlet:
    context-path: /springBootZookeeperConsumer
    display-name: springBootZookeeperConsumer

spring:
  profiles:
    #各个环境配置文件，需要修改  开发：dev， 测试：test，生产：prod
    active: prod
  application:
    name: springBootZookeeperConsumer
  task:
    pool:
      corePoolSize: 20
      maxPoolSize: 400
      keepAliveSeconds: 30000
      queueCapacity: 200
  dubbo:
    application:
    #注册在注册中心的名称，唯一标识，请勿重复
      id: zookeeper
      name: zookeeper
    #注册中心地址，zookeeper集群，启动输出可以看见链接了多个
    registry:
      address: zookeeper://127.0.0.1:2181
    #暴露服务方式
    protocol:
      id: dubbo
      #默认名称，勿修改
      name: dubbo
      #暴露服务端口 （默认是20880，修改端口，不同的服务提供者端口不能重复）
#      port: 20882
    #调用dubbo组建扫描的项目路径
    scan: com.test.service
    provider:
      validation: true
      timeout: 50000
      retries: 1
      loadbalance: leastactive
      #此dubbo过滤器可无需配置
      filter: providerRpcTraceFilter
      #版本号分组信息
      group: test
      version: 1.0
    consumer:
      check: false
      timeout: 30000
      retries: 1
      loadbalance: leastactive
      validation: true
      #此dubbo过滤器可无需配置
      filter: consumerRpcTraceFilter
      #版本号分组信息
      group: test
      version: 1.0
  kafka:
# 以逗号分隔的地址列表，用于建立与Kafka集群的初始连接(kafka 默认的端口号为9092)
      bootstrap-servers: 127.0.0.1:9092
      consumer:
        # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
        auto-commit-interval: 1S
        # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
        # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
        # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
        auto-offset-reset: earliest
        # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
        enable-auto-commit: false
        # 键的反序列化方式
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        # 值的反序列化方式
        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        group-id: test2
      listener:
        # 在侦听器容器中运行的线程数。
        concurrency: 5
        #listner负责ack，每调用一次，就立即commit
        ack-mode: manual_immediate

logging:
  config: classpath:log/log4j2-prod.xml

#dubbo:
#  application:
#    id: ilss-consumer
#    name: ilss-consumer
#  registry:
#    protocol: zookeeper
#    address: 127.0.0.1:2181
#    id: registry-1
#  protocol:
#    name: dubbo
#    port: 20889
#  consumer:
#    version: 1.0

#调用第三方http接口配置
http:
  #超时时间，单位毫秒
  timeOut: 8000
  #最大连接数
  maxTotal: 400
  #单个路由最大连接数
  defaultMaxPerRoute: 200
  # 线程池配置
  thread-pool:
    core-pool-size: 50
    max-pool-size: 1000
    queue-capacity: 10000
    keep-alive-seconds: 300

#系统参数配置（运营不关心的配置）
systemparameters:
  project:
    name: 'SpringBootZookeeperConsumer'
